
// 7/6
内積
cosはx方向
sinはy方向

ax=cosα
ay=sinα
bx=cosβ
by=sinβ

A・B=ax*bx+ay*by
sinαsinβ+cosαcosβ
=cos(α-β)=cos(β-α)=cosθ

PsinαQsinβ+PcosαQcosβ
PQ(cosαcosβ+sinαsinβ)
=PQcos(α-β)=PQcos(β-α)=PQcosθ
|A||B|cosθ

cosθ=Dot(A,B)

θ=acos(Dot(A,B))

θ=θ>30°?30°:θ
θ=min(θ,30)

加法定理
sin(α±β)=sinαcosβ±sinβcosα
cos(α±β)=cosαcosβ∓sinαsinβ


外積
A(ax,ab) B(bx,by)
A×B=|A||B|sinθ

A×B=ax*by-ay*bx
=cosαsinβ-sinαcosβ
=sinβcosα-sinαcosβ
=sin(β-α)
B×A=bx*ay-by*ax
=sin(α-β)

右回りか左回りかは外積の符号を利用する


// 7/8
処理落ちしないために
…ロードは最小限
→できれば非同期読み込み
　DxLibであれば非同期読み込み関数があります
　最近のゲームだと数GBとかのリソースがあります

apkってご存じ？
apkは基本的にexeとリソースが一緒になって
zip化されたようなもの。これをAndroidで実行すると
インストール的なことが起こる。

野良apkには気を付けよう。
詐欺SMSで、「佐川急便です。荷物を持ち帰りましたので、
ここにアクセスしてください」→apkをダウンロード→インストール
（カード情報や、管理ID、パスワードを勝手に抜き取る）
ふつうは、野良apkは実行できないようになっている。
Androidは、GoolglePlayからインストールしたものしか実行できないようになっている。

DMMのアプリのいくつかが、apk状態で配布されている。
なんでか？DMMには成人コンテンツがある。
で、AppleとかGoogleは成人コンテンツが嫌い。

なので、DMMとしては成人コンテンツも配信したいので、
野良pakをダウンロードさせたい。
成人コンテンツをインストールしたいなら野良apkOKの設定にしてくれ。

(消費者として)apkって出てきたら、ちょっとと警戒しましょう。
自分でapkを作ることもあるので、それを動作させるには、
野良apkOKにしておかなければならないので、
この手の開発をする人は、セキュリティには十分気を付けてください。

※リソースとは、プログラムファイルexe以外のもの
(音楽・画像・動画・スクリプト)
だいたいexeは最近のアプリ・ゲームでも
数KB～数10MB
○○GBの大半はリソースファイル

スクリプトというのは、外部のプログラム
「スクリプト言語」というものがあります。
今皆さんがプログラムしているC++などは、
プログラム→コンパイル→exe
Javascriptなんかは、スクリプト言語といって、
コンパイル不要。
Javascriptの場合は、ブラウザが実行時にJavascriptを、
構成する文字列を解析し（字句解析/構文解析）、
意味するところを読み取って、そのまま実行する。
Python/JS/Lua/TS/など

例えば、敵のAIやら、状態遷移（シーン遷移）やらを
外部のスクリプト言語にして、それの読み取り解析はexe側でやる。
(在学中にこのあたりの技術に触れることはまずない…)
実際のゲーム開発の現場で使われているのはこの技術で
スクリプトを利用した開発で、状態遷移なんかを
ハードコーディングしていることは少ない。

ハードコーディングとは…直接cppなどのプログラミングに
データを書き込むこと。

例えば、マップ情報(通れるところ、通れないところ)
0空白、1ブロック、10敵というのを、
データとして作成するとき、2次元配列として作って…ないですか？
この2次元配列を直接

int map[100][100] = {...};
こんな感じでcppのプログラム文中に直接書いちゃうのが、
ハードコーディング、です。
これだと問題があって、マップとかの情報をいじることを、
「レベルデザイン」といいます。

実際のゲーム開発の場合、αテスト(バグ取りしかしない状態、フィックス状態)
→βテストとかってあるんですが、
一回テストチームにテスト依頼すると、
毎日のようにバグ情報が飛んでくる。
基本的にはこのバグを修正するのがプログラマの仕事です。

この段階で機能を追加することはしません。
この段階で機能を追加すると9割バグります。
機能を追加すると、せっかくデバッグチームが報告して、
プログラマが直したのに、意味がなくなります。

とはいえ…っ細かい部分、ブロックの配置とか、直したい、
でもプログラムはいじりたくない…なので、マップのデータなどは、
外部のデータにして、読み取るだけにしておく。
なので、相当な量のデータが外部データになります。

というわけで、exeはデータを再生する再生機くらいの役割です。

パラメータ(HP/MP/AP/AGLなどなど)

このクソでかリソースは、だいたいストレージにあります。

ストレージはHDD/SSD/クラウド/DVDだったりします。
昔はDVDだったけど、今はDVDから直接読み込むことはないです。
が、、皆さんが就活するときに送る
「作品集」これは大抵の場合は、DVDに焼いて送ります。

DVDからの読み込みが一番重く、おそらく現場では、
いちいちHDDにコピーなんかしないため、
とにかくボトルネックになるのは読み込みになると思います。

ゲーム機同時にすべて読み込むのは「無理」です。
なので、たいていの場合は、起動時に、
・最初に必要なリソース(タイトル画面とか)
・共通で読み込むリソース(カーソルとかフォントとか)
を読み込む。じゃあそれ以外はというと、
必要になってから読み込みを行います。
この時に、読み込みはクソ重い。
ゲームにかかわる処理の中でも最も重い。

例えば、画像の読み込みは(LoadGraphとか)
ストレージ※→メインメモリ→VRAM
ストレージからメインメモリがもっとっも重い。
これをメインループが始まった後に
読み込むと「処理落ち必至」なので
対処としては

①非同期読み込み
(SetUseASyncLoadFlag/CheckHandleASyncLoad(int Handle))←非同期読み込みセット
　→メインプログラムを動作させたまま
　　「裏」で読み込みを行います。
　例えば、LoadGraphですが、これ今だと
　ロードが完了して初めてハンドルをもらいます。
　NoｗLoading
　非同期読み込みの場合だと即時にハンドルを返します。
　(ロードは完了していません)
　完了するまで使えません。
　ハンドルを用いて、「ロード完了」をチェックする。
　完了していたら初めて使えるようになります。

②動画や音楽は非同期読み込みというより
「ストリーミング再生」を行います。
効果音とかはロードしますが、
BGMや動画はロードしながら再生します。


Trail Rendererについて

Trail：軌跡、足跡
イメージとしては飛行機雲

Trail Rendereというのは、軌跡を描画するもので
Trail Rendereで検索したら、99%Unityの記事が出てきます。
正直、自前実装とかは見つけられないと思います。


<!--トレイルの自前実装のお話-->
トレイルは、オブジェクトが移動した後に沿って描画されます。
つまり、これは場所の履歴を結んだものが、
トレイル(軌跡)と言えます。
場所(座標)を1フレームごとに取っておいて、
それを線でつなげる。

履歴をとるために、動的に増えたり減ったりする配列的が欲しい。

×vector：メリット：メモリが連続しているので特定の要素の呼び出しに強い
	（連続していなければならない）
	デメリット：メモリ確保時に連続していないと速度的な問題がおこる
（別のメモリ領域に同じ配列を用意し、メモリを再確保する。なお、
すでにあるデータをすべてコピーする上に元のメモリを自動で開放する）

〇list：メリット：メモリは連続していないので、メモリを確保しやすい
	（次の値のポインタを保持している）
	デメリット：特定の要素の検索に弱い
	（ポインタを頭から順に読んでいかなければいけない）

vectorだのlistだのarrayはコンテナといいますが、
それぞれコンテナにはメリットデメリットが存在します。

今回はデメリットに注目して選びたいと思います。

弱点
vector：頻繁な要素の追加や削除に弱い
	特に、先頭に要素を入れられることに弱い。
	（push_front()で頭にデータを入れると、
	追加した値の下に既にあるデータをコピーして貼り付ける）

list：ランダムアクセスに弱い
　　（順番通りのアクセスが一番早い）
　　メモリが連続していない

メリット
vector：メモリが連続している、ランダムアクセスに強い
list：追加、削除のコストが小さい

（vectorとlistはトレードオフの関係）

もし、迷ったら…
vector使おう！動的配列なので、柔軟には使えるため
迷ったらvectorでいいと思います。コンテナのインターフェイスは
似た構造になっているので、途中でvectorをlistに変えたいと思ったら
比較的変更のコストは軽いです。

※もし、メモリが連続している性質に依存している処理がある場合は、
バグの原因になるので気を付けましょう。

<!--for文と範囲for文のお話-->
一般的なfor文
for(int i = 0; i < num; i++){
　//一番最初に習うfor文
}

範囲for文とは：配列やコンテナのように、
複数の要素を格納しているコンテナ内の
要素をすべて参照処理するfor文

例文
<code>
#include <iostream>
#include <list>

using namespace std;

int main(){
 	int a[] = {2,5,9,4,7,9,3};
	list<int> b ={1,3,6,8,9};

	for(auto& val : a){
		++val;
	}
	 for(auto val : b){
		cout << b << endl;
	}
	return 0;
}
</code>
範囲for文の文法(何であれコンテナの頭から値を参照可能)
for(要素の型名 一時変数名 : コンテナオブジェクト){
}
なお、型名はコンテナの要素であることがわかっているので、
大抵の場合はautoを使って大丈夫。
for(auto 一時変数名 : コンテナオブジェクト){
}
ただし、ちょっと注意点…この書き方の場合、
それぞれの要素を一時変数にコピーして使っているにすぎないので、
中の値を、変更したい場合は参照記号「＆」を使って実体を参照します。
for(auto& 変数名 : コンテナオブジェクト){
}
これで、実体の変数をいじることができるようになる。
<!--範囲for文のお話ここまで-->

<!--参考演算子のおさらい-->
参考演算子
式 ? 値１ : 値２

式がtrueなら値1を採用、そうじゃないなら値２を採用
<!--参考演算子のおさらいここまで-->




